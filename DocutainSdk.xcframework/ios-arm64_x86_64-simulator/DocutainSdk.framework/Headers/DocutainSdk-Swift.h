#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DOCUTAINSDK_SWIFT_H
#define DOCUTAINSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DocutainSdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC11DocutainSdk20AnalyzeConfiguration")
@interface AnalyzeConfiguration : NSObject
/// True if you want to read the BIC.
@property (nonatomic) BOOL readBIC;
/// True if you want to read the payment state.
@property (nonatomic) BOOL readPaymentState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC11DocutainSdk18ColorConfiguration")
@interface ColorConfiguration : NSObject
- (void)setColorPrimaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorSecondaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorOnSecondaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanButtonsLayoutBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanButtonsForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanPolygonWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorBottomBarBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorBottomBarForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorTopBarBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorTopBarForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NSString;
enum PDFPageFormat : NSInteger;
enum PageSourceType : NSInteger;
@class NSData;

SWIFT_CLASS("_TtC11DocutainSdk8Document")
@interface Document : NSObject
/// This method generates a PDF document from the loaded or scanned pages.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: the URL where to save the PDF document
///   </li>
///   <li>
///     fileName: the file name of the PDF document
///   </li>
///   <li>
///     overwrite: if file already exists, indicate whether to override it or append number, e.g. TestPDF(1).pdf
///   </li>
///   <li>
///     pageFormat: the PDF page format, refer to <code>PDFPageFormat</code>
///   </li>
/// </ul>
///
/// returns:
/// the URL of the generated PDF document if it was successfully generated, nil otherwise
+ (NSURL * _Nullable)writePDFWithFileUrl:(NSURL * _Nonnull)fileUrl fileName:(NSString * _Nonnull)fileName overwrite:(BOOL)overwrite pageFormat:(enum PDFPageFormat)pageFormat SWIFT_WARN_UNUSED_RESULT;
/// This method generates a JPG file from the loaded or scanned page and saves it to a local file.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     page: the page to be generated as JPG
///   </li>
///   <li>
///     fileURL: the URL where to save the JPG file
///   </li>
/// </ul>
///
/// returns:
/// the URL of the generated JPG file if it was successfully generated, nil otherwise
+ (NSURL * _Nullable)writeImageWithPage:(NSInteger)page fileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// This method generates a JPG file from the loaded or scanned page and returns it as NSData.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     page: the page to be generated as JPG
///   </li>
///   <li>
///     pageSourceType: the <code>PageSourceType</code> to be used when generating the JPG
///   </li>
/// </ul>
///
/// returns:
/// the NSData of the generated JPG file if it was successfully generated, nil otherwise
+ (NSData * _Nullable)getImageWithPage:(NSInteger)page pageSourceType:(enum PageSourceType)pageSourceType SWIFT_WARN_UNUSED_RESULT;
/// This method loads a file from the given URL.
/// You need to make sure that the file is accessible.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: the URL pointing to the file to be loaded
///   </li>
/// </ul>
///
/// returns:
/// true if load was successful, false otherwise
+ (BOOL)loadFileWithFileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// This method returns the page count of the currently loaded document.
///
/// returns:
/// page count of the currently loaded document
+ (NSInteger)pageCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Available PDF page formats when generating PDF documents.
typedef SWIFT_ENUM(NSInteger, PDFPageFormat, open) {
  PDFPageFormatFitToPages = 0,
  PDFPageFormatA4 = 1,
  PDFPageFormatA4Landscape = 2,
  PDFPageFormatA5 = 3,
  PDFPageFormatA5Landscape = 4,
  PDFPageFormatLetter = 5,
  PDFPageFormatLetterLandscape = 6,
  PDFPageFormatLegal = 7,
  PDFPageFormatLegalLandscape = 8,
};

/// Available page source types when generating image files from scanned or imported pages.
typedef SWIFT_ENUM(NSInteger, PageSourceType, open) {
/// Uncut, unfiltered image as delivered by camera.
  PageSourceTypeOriginal = 0,
/// Cut and filtered image.
  PageSourceTypeCutFilter = 1,
/// Cut only image, no filter.
  PageSourceTypeCutOnly = 2,
};


SWIFT_CLASS("_TtC11DocutainSdk18DocumentDataReader") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DocumentDataReader : NSObject
/// Load a file from a given URL.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: The URL pointing to the file to be loaded
///   </li>
///   <li>
///     password: the password if file is encrypted
///   </li>
/// </ul>
///
/// returns:
/// true if load was successful, false otherwise. If false, then it might be due to a wrong password if file is encrypted. See <code>DocutainSDK/getLastErrorCode()</code>.
+ (BOOL)loadFileWithFileUrl:(NSURL * _Nonnull)fileUrl password:(NSString * _Nullable)password SWIFT_WARN_UNUSED_RESULT;
/// Get the text of the currently loaded document.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     pageNumber: number of the page you want the text from or -1 to get text of the entire document
///   </li>
/// </ul>
///
/// returns:
/// the detected text
+ (NSString * _Nonnull)getTextWithPageNumber:(int32_t)pageNumber SWIFT_WARN_UNUSED_RESULT;
/// This method sets the analyze configuration and starts necessary processes for text detection.
/// It needs to be called right after DocutainSDK.initSDK().
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     analyzeConfiguration: the configuration you like to use
///   </li>
/// </ul>
///
/// returns:
/// true if configuration was successful, false otherwise
+ (BOOL)setAnalyzeConfigurationWithAnalyzeConfiguration:(AnalyzeConfiguration * _Nonnull)analyzeConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Analyzes the currently loaded document and returns the detected data.
///
/// returns:
/// the detected data as JSON string
+ (NSString * _Nonnull)analyze SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ScanFilter : NSInteger;
@class PageEditConfiguration;
enum Source : NSInteger;

/// Pass an instance of this class to <code>UI/scanDocument(scanDelegate:scanConfig:)</code> to alter the default scan behaviour.
SWIFT_CLASS("_TtC11DocutainSdk28DocumentScannerConfiguration")
@interface DocumentScannerConfiguration : NSObject
/// If true, the NavigationBar will display an Item allowing the user to switch between auto capture and manual capture. Defaults to false.
@property (nonatomic) BOOL allowCaptureModeSetting;
/// If true, the camera will capture the image automatically at the right moment. Defaults to true.
@property (nonatomic) BOOL autoCapture;
/// The default scan filter that will be used after scan. Defaults to <code>ScanFilter/illustration</code>.
@property (nonatomic) enum ScanFilter defaultScanFilter;
/// Configuration class used to alter the default page editing behaviour.
@property (nonatomic, strong) PageEditConfiguration * _Nonnull pageEditConfig;
/// Configuration class used to alter the default color behaviour.
@property (nonatomic, strong) ColorConfiguration * _Nonnull colorConfig;
/// Your custom image for the onboarding dialog that appears when scan is opened for the first time.
/// Needs to be the name of an image in your assets catalog.
@property (nonatomic, copy) NSString * _Nullable onboardingImageSource;
/// Select the source for the document scanner. Defaults to <code>Source/image</code>. See <code>Source</code> for possible values.
@property (nonatomic) enum Source source;
/// The source images for the document scanner if you have set the <code>source</code> to <code>Source.image</code>.
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull sourceImages;
/// If true, image gets automatically cropped if document was detected. This applies only when
/// <code>source</code> is <code>Source/image</code> or <code>Source/gallery</code> or <code>Source/galleryMultiple</code>. Defaults to true.
@property (nonatomic) BOOL autoCrop;
/// If true, scanning multi page documents is possible. Set this to false if you need to scan single page documents. Defaults to true.
@property (nonatomic) BOOL multiPage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(uint32_t, DocutainError, open) {
/// No error happend within Docutain SDK.
  DocutainErrorNoError = 0,
  DocutainErrorFileIO = 1,
/// The provided data is invalid.
  DocutainErrorDataNotValid = 7,
/// The file is encrypted and the provided password was either empty or wrong.
  DocutainErrorPasswordNotValid = 12,
};


SWIFT_CLASS("_TtC11DocutainSdk11DocutainSDK")
@interface DocutainSDK : NSObject
/// Initializes the Docutain SDK.
/// This method needs to be called prior to using any functionality of the Docutain SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     licenseKey: Your license key
///   </li>
/// </ul>
///
/// returns:
/// true if initialization was successful, false otherwise
+ (BOOL)initSDKWithLicenseKey:(NSString * _Nonnull)licenseKey SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// This method returns the currently used Docutain SDK version.
///
/// returns:
/// the version of the Docutain SDK
+ (NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// This method returns the latest error message if any occured.
///
/// returns:
/// the error message
+ (NSString * _Nonnull)getLastError SWIFT_WARN_UNUSED_RESULT;
/// This method returns the latest error code if any occured.
///
/// returns:
/// the error code as <code>DocutainError</code>
+ (enum DocutainError)getLastErrorCode SWIFT_WARN_UNUSED_RESULT;
/// This method deletes all temporary files created by the Docutain SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     deleteTraceFileContent: If true, the content of the Trace file which you can send to us in order to solve any problems will also be deleted
///   </li>
/// </ul>
///
/// returns:
/// true if all files deleted successfully, false if an error occurred`
+ (BOOL)deleteTempFilesWithDeleteTraceFileContent:(BOOL)deleteTraceFileContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum Level : uint32_t;

SWIFT_CLASS("_TtC11DocutainSdk6Logger")
@interface Logger : NSObject
/// This method sets the log level, which determines the severity of the message.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     level: The log Level
///   </li>
/// </ul>
+ (void)setLogLevelWithLevel:(enum Level)level;
/// This method returns the Trace file which includes logging and error messages .
///
/// returns:
/// the Trace file
+ (NSString * _Nonnull)getTraceFile SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// <ul>
///   <li>
///     Logs can be filtered based on their priority.
///   </li>
/// </ul>
typedef SWIFT_ENUM(uint32_t, Level, open) {
  LevelDisable = 0,
  LevelAssert = 1,
  LevelError = 2,
  LevelWarning = 3,
  LevelInfo = 4,
  LevelDebug = 5,
  LevelVerbose = 6,
};


/// Pass an instance of this class to <code>UI/scanDocument(scanDelegate:scanConfig:)</code> to alter the default scan behaviour.
SWIFT_CLASS("_TtC11DocutainSdk21PageEditConfiguration")
@interface PageEditConfiguration : NSObject
/// If false, the bottom toolbar will hide the rotate page item. Defaults to true.
@property (nonatomic) BOOL allowPageRotation;
/// If false, the bottom toolbar will hide the filter page item. Defaults to true.
@property (nonatomic) BOOL allowPageFilter;
/// If false, the bottom toolbar will hide the page cropping item. Defaults to true.
@property (nonatomic) BOOL allowPageCropping;
/// If false, the bottom toolbar will hide the arrange page item. Defaults to true.
@property (nonatomic) BOOL allowPageArrangement;
/// If true, each item of the page arrangement functionality will show a delete button.
/// Defaults to false.
@property (nonatomic) BOOL pageArrangementShowDeleteButton;
/// If true, each item of the page arrangement functionality will show it’s page number.
/// Defaults to true.
@property (nonatomic) BOOL pageArrangementShowPageNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Implement this delegate to be notified when the scan process is finished.
SWIFT_PROTOCOL("_TtP11DocutainSdk12ScanDelegate_")
@protocol ScanDelegate <NSObject>
/// Use this method to get notified when the scan process is finished,
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     withResult: The result of the scan process. True, if user finished the scan process successfully, false if process was canceled.
///   </li>
/// </ul>
- (void)didFinishScanWithResult:(BOOL)withResult;
@end

/// Available filters that can be applied on scanned documents.
typedef SWIFT_ENUM(NSInteger, ScanFilter, open) {
  ScanFilterAuto = 0,
  ScanFilterGray = 1,
  ScanFilterBlackWhite = 2,
  ScanFilterOriginal = 3,
  ScanFilterText = 4,
  ScanFilterAuto2 = 5,
  ScanFilterIllustration = 8,
};

/// Available sources for the document scanner.
typedef SWIFT_ENUM(NSInteger, Source, open) {
/// Scan a document by using the devices camera.
  SourceCamera = 0,
/// Scan a document from the provided image.
  SourceImage = 1,
/// Open an image picker in single selection mode and scan a document from the selected image.
  SourceGallery = 2,
/// Open an image picker in multi selection mode and scan documents from the selected images.
  SourceGalleryMultiple = 3,
};


SWIFT_CLASS("_TtC11DocutainSdk2UI")
@interface UI : NSObject
/// Starts the document scan process.
/// If process was successful you can do a bunch of things, like generating a PDF document, get the detected text or the analyzed data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     scanDelegate: The delegate that gets called once the scan process is either finished or canceled. See <code>ScanDelegate</code>.
///   </li>
///   <li>
///     scanConfig: A configuration to customize the scan behaviour. See <code>DocumentScannerConfiguration</code> for more details.
///   </li>
/// </ul>
+ (void)scanDocumentWithScanDelegate:(id <ScanDelegate> _Nonnull)scanDelegate scanConfig:(DocumentScannerConfiguration * _Nonnull)scanConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DOCUTAINSDK_SWIFT_H
#define DOCUTAINSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DocutainSdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC11DocutainSdk20AnalyzeConfiguration")
@interface AnalyzeConfiguration : NSObject
/// True if you want to read the BIC.
@property (nonatomic) BOOL readBIC;
/// True if you want to read the payment state.
@property (nonatomic) BOOL readPaymentState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC11DocutainSdk18ColorConfiguration")
@interface ColorConfiguration : NSObject
- (void)setColorPrimaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorSecondaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorOnSecondaryWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanButtonsLayoutBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanButtonsForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorScanPolygonWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorBottomBarBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorBottomBarForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorTopBarBackgroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (void)setColorTopBarForegroundWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NSString;
enum PDFPageFormat : NSInteger;
enum PageSourceType : NSInteger;
@class NSData;

SWIFT_CLASS("_TtC11DocutainSdk8Document")
@interface Document : NSObject
/// This method generates a PDF document from the loaded or scanned pages.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: the URL where to save the PDF document
///   </li>
///   <li>
///     fileName: the file name of the PDF document
///   </li>
///   <li>
///     overwrite: if file already exists, indicate whether to override it or append number, e.g. TestPDF(1).pdf
///   </li>
///   <li>
///     pageFormat: the PDF page format, refer to <code>PDFPageFormat</code>
///   </li>
/// </ul>
///
/// returns:
/// the URL of the generated PDF document if it was successfully generated, nil otherwise
+ (NSURL * _Nullable)writePDFWithFileUrl:(NSURL * _Nonnull)fileUrl fileName:(NSString * _Nonnull)fileName overwrite:(BOOL)overwrite pageFormat:(enum PDFPageFormat)pageFormat SWIFT_WARN_UNUSED_RESULT;
/// This method generates a JPG file from the loaded or scanned page and saves it to a local file.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     page: the page to be generated as JPG
///   </li>
///   <li>
///     fileURL: the URL where to save the JPG file
///   </li>
/// </ul>
///
/// returns:
/// the URL of the generated JPG file if it was successfully generated, nil otherwise
+ (NSURL * _Nullable)writeImageWithPage:(NSInteger)page fileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// This method generates a JPG file from the loaded or scanned page and returns it as NSData.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     page: the page to be generated as JPG
///   </li>
///   <li>
///     pageSourceType: the <code>PageSourceType</code> to be used when generating the JPG
///   </li>
/// </ul>
///
/// returns:
/// the NSData of the generated JPG file if it was successfully generated, nil otherwise
+ (NSData * _Nullable)getImageWithPage:(NSInteger)page pageSourceType:(enum PageSourceType)pageSourceType SWIFT_WARN_UNUSED_RESULT;
/// This method loads a file from the given URL.
/// You need to make sure that the file is accessible.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: the URL pointing to the file to be loaded
///   </li>
/// </ul>
///
/// returns:
/// true if load was successful, false otherwise
+ (BOOL)loadFileWithFileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// This method returns the page count of the currently loaded document.
///
/// returns:
/// page count of the currently loaded document
+ (NSInteger)pageCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Available PDF page formats when generating PDF documents.
typedef SWIFT_ENUM(NSInteger, PDFPageFormat, open) {
  PDFPageFormatFitToPages = 0,
  PDFPageFormatA4 = 1,
  PDFPageFormatA4Landscape = 2,
  PDFPageFormatA5 = 3,
  PDFPageFormatA5Landscape = 4,
  PDFPageFormatLetter = 5,
  PDFPageFormatLetterLandscape = 6,
  PDFPageFormatLegal = 7,
  PDFPageFormatLegalLandscape = 8,
};

/// Available page source types when generating image files from scanned or imported pages.
typedef SWIFT_ENUM(NSInteger, PageSourceType, open) {
/// Uncut, unfiltered image as delivered by camera.
  PageSourceTypeOriginal = 0,
/// Cut and filtered image.
  PageSourceTypeCutFilter = 1,
/// Cut only image, no filter.
  PageSourceTypeCutOnly = 2,
};


SWIFT_CLASS("_TtC11DocutainSdk18DocumentDataReader") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DocumentDataReader : NSObject
/// Load a file from a given URL.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     fileUrl: The URL pointing to the file to be loaded
///   </li>
///   <li>
///     password: the password if file is encrypted
///   </li>
/// </ul>
///
/// returns:
/// true if load was successful, false otherwise. If false, then it might be due to a wrong password if file is encrypted. See <code>DocutainSDK/getLastErrorCode()</code>.
+ (BOOL)loadFileWithFileUrl:(NSURL * _Nonnull)fileUrl password:(NSString * _Nullable)password SWIFT_WARN_UNUSED_RESULT;
/// Get the text of the currently loaded document.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     pageNumber: number of the page you want the text from or -1 to get text of the entire document
///   </li>
/// </ul>
///
/// returns:
/// the detected text
+ (NSString * _Nonnull)getTextWithPageNumber:(int32_t)pageNumber SWIFT_WARN_UNUSED_RESULT;
/// This method sets the analyze configuration and starts necessary processes for text detection.
/// It needs to be called right after DocutainSDK.initSDK().
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     analyzeConfiguration: the configuration you like to use
///   </li>
/// </ul>
///
/// returns:
/// true if configuration was successful, false otherwise
+ (BOOL)setAnalyzeConfigurationWithAnalyzeConfiguration:(AnalyzeConfiguration * _Nonnull)analyzeConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Analyzes the currently loaded document and returns the detected data.
///
/// returns:
/// the detected data as JSON string
+ (NSString * _Nonnull)analyze SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ScanFilter : NSInteger;
@class PageEditConfiguration;
enum Source : NSInteger;

/// Pass an instance of this class to <code>UI/scanDocument(scanDelegate:scanConfig:)</code> to alter the default scan behaviour.
SWIFT_CLASS("_TtC11DocutainSdk28DocumentScannerConfiguration")
@interface DocumentScannerConfiguration : NSObject
/// If true, the NavigationBar will display an Item allowing the user to switch between auto capture and manual capture. Defaults to false.
@property (nonatomic) BOOL allowCaptureModeSetting;
/// If true, the camera will capture the image automatically at the right moment. Defaults to true.
@property (nonatomic) BOOL autoCapture;
/// The default scan filter that will be used after scan. Defaults to <code>ScanFilter/illustration</code>.
@property (nonatomic) enum ScanFilter defaultScanFilter;
/// Configuration class used to alter the default page editing behaviour.
@property (nonatomic, strong) PageEditConfiguration * _Nonnull pageEditConfig;
/// Configuration class used to alter the default color behaviour.
@property (nonatomic, strong) ColorConfiguration * _Nonnull colorConfig;
/// Your custom image for the onboarding dialog that appears when scan is opened for the first time.
/// Needs to be the name of an image in your assets catalog.
@property (nonatomic, copy) NSString * _Nullable onboardingImageSource;
/// Select the source for the document scanner. Defaults to <code>Source/image</code>. See <code>Source</code> for possible values.
@property (nonatomic) enum Source source;
/// The source images for the document scanner if you have set the <code>source</code> to <code>Source.image</code>.
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull sourceImages;
/// If true, image gets automatically cropped if document was detected. This applies only when
/// <code>source</code> is <code>Source/image</code> or <code>Source/gallery</code> or <code>Source/galleryMultiple</code>. Defaults to true.
@property (nonatomic) BOOL autoCrop;
/// If true, scanning multi page documents is possible. Set this to false if you need to scan single page documents. Defaults to true.
@property (nonatomic) BOOL multiPage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(uint32_t, DocutainError, open) {
/// No error happend within Docutain SDK.
  DocutainErrorNoError = 0,
  DocutainErrorFileIO = 1,
/// The provided data is invalid.
  DocutainErrorDataNotValid = 7,
/// The file is encrypted and the provided password was either empty or wrong.
  DocutainErrorPasswordNotValid = 12,
};


SWIFT_CLASS("_TtC11DocutainSdk11DocutainSDK")
@interface DocutainSDK : NSObject
/// Initializes the Docutain SDK.
/// This method needs to be called prior to using any functionality of the Docutain SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     licenseKey: Your license key
///   </li>
/// </ul>
///
/// returns:
/// true if initialization was successful, false otherwise
+ (BOOL)initSDKWithLicenseKey:(NSString * _Nonnull)licenseKey SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// This method returns the currently used Docutain SDK version.
///
/// returns:
/// the version of the Docutain SDK
+ (NSInteger)version SWIFT_WARN_UNUSED_RESULT;
/// This method returns the latest error message if any occured.
///
/// returns:
/// the error message
+ (NSString * _Nonnull)getLastError SWIFT_WARN_UNUSED_RESULT;
/// This method returns the latest error code if any occured.
///
/// returns:
/// the error code as <code>DocutainError</code>
+ (enum DocutainError)getLastErrorCode SWIFT_WARN_UNUSED_RESULT;
/// This method deletes all temporary files created by the Docutain SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     deleteTraceFileContent: If true, the content of the Trace file which you can send to us in order to solve any problems will also be deleted
///   </li>
/// </ul>
///
/// returns:
/// true if all files deleted successfully, false if an error occurred`
+ (BOOL)deleteTempFilesWithDeleteTraceFileContent:(BOOL)deleteTraceFileContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum Level : uint32_t;

SWIFT_CLASS("_TtC11DocutainSdk6Logger")
@interface Logger : NSObject
/// This method sets the log level, which determines the severity of the message.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     level: The log Level
///   </li>
/// </ul>
+ (void)setLogLevelWithLevel:(enum Level)level;
/// This method returns the Trace file which includes logging and error messages .
///
/// returns:
/// the Trace file
+ (NSString * _Nonnull)getTraceFile SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// <ul>
///   <li>
///     Logs can be filtered based on their priority.
///   </li>
/// </ul>
typedef SWIFT_ENUM(uint32_t, Level, open) {
  LevelDisable = 0,
  LevelAssert = 1,
  LevelError = 2,
  LevelWarning = 3,
  LevelInfo = 4,
  LevelDebug = 5,
  LevelVerbose = 6,
};


/// Pass an instance of this class to <code>UI/scanDocument(scanDelegate:scanConfig:)</code> to alter the default scan behaviour.
SWIFT_CLASS("_TtC11DocutainSdk21PageEditConfiguration")
@interface PageEditConfiguration : NSObject
/// If false, the bottom toolbar will hide the rotate page item. Defaults to true.
@property (nonatomic) BOOL allowPageRotation;
/// If false, the bottom toolbar will hide the filter page item. Defaults to true.
@property (nonatomic) BOOL allowPageFilter;
/// If false, the bottom toolbar will hide the page cropping item. Defaults to true.
@property (nonatomic) BOOL allowPageCropping;
/// If false, the bottom toolbar will hide the arrange page item. Defaults to true.
@property (nonatomic) BOOL allowPageArrangement;
/// If true, each item of the page arrangement functionality will show a delete button.
/// Defaults to false.
@property (nonatomic) BOOL pageArrangementShowDeleteButton;
/// If true, each item of the page arrangement functionality will show it’s page number.
/// Defaults to true.
@property (nonatomic) BOOL pageArrangementShowPageNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Implement this delegate to be notified when the scan process is finished.
SWIFT_PROTOCOL("_TtP11DocutainSdk12ScanDelegate_")
@protocol ScanDelegate <NSObject>
/// Use this method to get notified when the scan process is finished,
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     withResult: The result of the scan process. True, if user finished the scan process successfully, false if process was canceled.
///   </li>
/// </ul>
- (void)didFinishScanWithResult:(BOOL)withResult;
@end

/// Available filters that can be applied on scanned documents.
typedef SWIFT_ENUM(NSInteger, ScanFilter, open) {
  ScanFilterAuto = 0,
  ScanFilterGray = 1,
  ScanFilterBlackWhite = 2,
  ScanFilterOriginal = 3,
  ScanFilterText = 4,
  ScanFilterAuto2 = 5,
  ScanFilterIllustration = 8,
};

/// Available sources for the document scanner.
typedef SWIFT_ENUM(NSInteger, Source, open) {
/// Scan a document by using the devices camera.
  SourceCamera = 0,
/// Scan a document from the provided image.
  SourceImage = 1,
/// Open an image picker in single selection mode and scan a document from the selected image.
  SourceGallery = 2,
/// Open an image picker in multi selection mode and scan documents from the selected images.
  SourceGalleryMultiple = 3,
};


SWIFT_CLASS("_TtC11DocutainSdk2UI")
@interface UI : NSObject
/// Starts the document scan process.
/// If process was successful you can do a bunch of things, like generating a PDF document, get the detected text or the analyzed data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     scanDelegate: The delegate that gets called once the scan process is either finished or canceled. See <code>ScanDelegate</code>.
///   </li>
///   <li>
///     scanConfig: A configuration to customize the scan behaviour. See <code>DocumentScannerConfiguration</code> for more details.
///   </li>
/// </ul>
+ (void)scanDocumentWithScanDelegate:(id <ScanDelegate> _Nonnull)scanDelegate scanConfig:(DocumentScannerConfiguration * _Nonnull)scanConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
